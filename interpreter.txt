An instruction sequnce is defined as:
inst_seq : inst
         | inst "," inst_seq

inst : "c" [0-9]+
     | "i" [0-9]+
     | "v" [0-9]+
     | "o" op
     | "f" func
     | "p" ("-"|"+")[0-9]+

op   : "+" | "-" | "*" | "/" | "p"

func : "abs" | "cos" | "exp" | "log" | "neg" | "sin" | "tan"

Instructions sequences are written in RPN. The behavior of each operation is
described below.
     
Push onto stack:
"c#": pushes a constant to the stack, # is an integer index 
      into the constants array.
"i#": pushes a variabe to the stack, # is an integer index into 
      the variables array.
"v#": pushes a user created variable to the stack, # is an integer index into
      the user variables array.

Operators:
"o<op>":  applies the operator <op> to the top two elements of the stack.
    	  <op> is in {+, -, *, /, p}, where p is interval exponent power 
	  function.

Functions:
"f<name>":  Applies single arg function <name> to the top element of the 
	    stack and pushes the result. <name> is in {abs, sin, cos, tan,
	    exp, log, neg}.

Integer power function:
"p#": Applies the power function to the top of the stack with integer exponent
      # and pushes the result.

When an instruction sequence is consumed the result of the calculation is the 
sole element remaining on the stack.
